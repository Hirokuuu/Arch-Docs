This codes is for ArchDLL - ArchAPI is shorten version and have auto updates dll
by DareQPlaysRBX#1001
Turned into a GitHub by Hiro 016#9228

____________________________________________________ 
This codes is for ArchDLL - ArchAPI is shorten version and have auto updates dll
____________________________________________________                        
1. Copy and Paste Arch.dll to your Project Debug Folder of ur Exploit and make a new folder "scripts"
____________________________________________________
Functions (new class)

using System;
using System.Threading;
using System.Windows.Forms;
using System.IO;
using System.Runtime.CompilerServices;
using System.Net;

namespace Exploit
{
    internal class Functions
    {
        public static string exploitdllname;

        public static OpenFileDialog openfiledialog;

        static Functions()
        {
            Functions.exploitdllname = "Arch.dll";
            Functions.openfiledialog = new OpenFileDialog()
            {
                Filter = "Lua Script Txt (*.txt)|*.txt|All files (*.*)|*.*",
                FilterIndex = 1,
                RestoreDirectory = true,
                Title = "Exploit - Load File"
            };
        }

        public static void PopulateListBox(ListBox lsb, string Folder, string FileType)
        {
            DirectoryInfo dinfo = new DirectoryInfo(Folder);
            FileInfo[] Files = dinfo.GetFiles(FileType);
            foreach (FileInfo file in Files)
            {
                lsb.Items.Add(file.Name);
            }
        }

        public Functions()
        {
        }

        public static void Inject()
        {
            if (NamedPipes.NamedPipeExist(NamedPipes.luapipename))
            {
                MessageBox.Show("Arch is attached :)", "Exploit - Already Attached", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            }
            else if (!NamedPipes.NamedPipeExist(NamedPipes.luapipename))
            {
                switch (Injector.DllInjector.GetInstance.Inject("RobloxPlayerBeta", string.Concat(AppDomain.CurrentDomain.BaseDirectory, Functions.exploitdllname)))
                {
                    case Injector.DllInjectionResult.DllNotFound:
                        {
                            MessageBox.Show(string.Concat("Not found a ", Functions.exploitdllname), "Exploit - DLL Not Found", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                            break;
                        }
                    case Injector.DllInjectionResult.GameProcessNotFound:
                        {
                            MessageBox.Show("Active Roblox process could not be found! Launch the game before making the injection!", "Exploit - Roblox Process", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                            break;
                        }
                    case Injector.DllInjectionResult.InjectionFailed:
                        {
                            break;
                        }
                    default:
                        {
                            Thread.Sleep(100);
                            if (!NamedPipes.NamedPipeExist(NamedPipes.luapipename))
                            {
                            }
                            break;
                        }
                }
            }
        }
    }
}
____________________________________________________
Injector: (new class, don't change anything)

using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;

namespace Exploit
{
    internal class Injector
    {
        public Injector()
        {
        }

        public enum DllInjectionResult
        {
            DllNotFound,
            GameProcessNotFound,
            InjectionFailed,
            Success
        }

        public sealed class DllInjector
        {
            private readonly static IntPtr INTPTR_ZERO;

            private static Injector.DllInjector _instance;

            public static Injector.DllInjector GetInstance
            {
                get
                {
                    if (Injector.DllInjector._instance == null)
                    {
                        Injector.DllInjector._instance = new Injector.DllInjector();
                    }
                    return Injector.DllInjector._instance;
                }
            }

            static DllInjector()
            {
                Injector.DllInjector.INTPTR_ZERO = (IntPtr)0;
            }

            private DllInjector()
            {
            }

            private bool bInject(uint pToBeInjected, string sDllPath)
            {
                unsafe
                {
                    bool flag;
                    IntPtr intPtr = Injector.DllInjector.OpenProcess(1082, 1, pToBeInjected);
                    if (intPtr != Injector.DllInjector.INTPTR_ZERO)
                    {
                        IntPtr procAddress = Injector.DllInjector.GetProcAddress(Injector.DllInjector.GetModuleHandle("kernel32.dll"), "LoadLibraryA");
                        if (procAddress != Injector.DllInjector.INTPTR_ZERO)
                        {
                            IntPtr intPtr1 = Injector.DllInjector.VirtualAllocEx(intPtr, (IntPtr)0, (IntPtr)sDllPath.Length, 12288, 64);
                            if (intPtr1 != Injector.DllInjector.INTPTR_ZERO)
                            {
                                byte[] bytes = Encoding.ASCII.GetBytes(sDllPath);
                                if (Injector.DllInjector.WriteProcessMemory(intPtr, intPtr1, bytes, (uint)bytes.Length, 0) == 0)
                                {
                                    flag = false;
                                }
                                else if (Injector.DllInjector.CreateRemoteThread(intPtr, (IntPtr)0, Injector.DllInjector.INTPTR_ZERO, procAddress, intPtr1, 0, (IntPtr)0) != Injector.DllInjector.INTPTR_ZERO)
                                {
                                    Injector.DllInjector.CloseHandle(intPtr);
                                    flag = true;
                                }
                                else
                                {
                                    flag = false;
                                }
                            }
                            else
                            {
                                flag = false;
                            }
                        }
                        else
                        {
                            flag = false;
                        }
                    }
                    else
                    {
                        flag = false;
                    }
                    return flag;
                }
            }

            [DllImport("kernel32.dll", CharSet = CharSet.None, ExactSpelling = false, SetLastError = true)]
            private static extern int CloseHandle(IntPtr hObject);

            [DllImport("kernel32.dll", CharSet = CharSet.None, ExactSpelling = false, SetLastError = true)]
            private static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttribute, IntPtr dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

            [DllImport("kernel32.dll", CharSet = CharSet.None, ExactSpelling = false, SetLastError = true)]
            private static extern IntPtr GetModuleHandle(string lpModuleName);

            [DllImport("kernel32.dll", CharSet = CharSet.None, ExactSpelling = false, SetLastError = true)]
            private static extern IntPtr GetProcAddress(IntPtr hModule, string lpProcName);

            public Injector.DllInjectionResult Inject(string sProcName, string sDllPath)
            {
                Injector.DllInjectionResult dllInjectionResult;
                if (File.Exists(sDllPath))
                {
                    uint id = 0;
                    Process[] processes = Process.GetProcesses();
                    int num = 0;
                    while (num < (int)processes.Length)
                    {
                        if (processes[num].ProcessName != sProcName)
                        {
                            num++;
                        }
                        else
                        {
                            id = (uint)processes[num].Id;
                            break;
                        }
                    }
                    if (id != 0)
                    {
                        dllInjectionResult = (this.bInject(id, sDllPath) ? Injector.DllInjectionResult.Success : Injector.DllInjectionResult.InjectionFailed);
                    }
                    else
                    {
                        dllInjectionResult = Injector.DllInjectionResult.GameProcessNotFound;
                    }
                }
                else
                {
                    dllInjectionResult = Injector.DllInjectionResult.DllNotFound;
                }
                return dllInjectionResult;
            }

            [DllImport("kernel32.dll", CharSet = CharSet.None, ExactSpelling = false, SetLastError = true)]
            private static extern IntPtr OpenProcess(uint dwDesiredAccess, int bInheritHandle, uint dwProcessId);

            [DllImport("kernel32.dll", CharSet = CharSet.None, ExactSpelling = false, SetLastError = true)]
            private static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, IntPtr dwSize, uint flAllocationType, uint flProtect);

            [DllImport("kernel32.dll", CharSet = CharSet.None, ExactSpelling = false, SetLastError = true)]
            private static extern int WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] buffer, uint size, int lpNumberOfBytesWritten);
        }
    }
}
____________________________________________________
NamedPipes (new class, u can change only information messages

using System;
using System.IO;
using System.IO.Pipes;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace Exploit
{
    internal class NamedPipes
    {
        public static string luapipename;

        static NamedPipes()
        {
            NamedPipes.luapipename = "Arch";
        }

        public NamedPipes()
        {
        }

        public static void LuaPipe(string script)
        {
            if (!NamedPipes.NamedPipeExist(NamedPipes.luapipename))
            {
                MessageBox.Show(string.Concat("Inject ", Functions.exploitdllname, " before using this!"), "Exploit - Error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }
            else
            {
                (new Thread(() => {
                    try
                    {
                        using (NamedPipeClientStream namedPipeClientStream = new NamedPipeClientStream(".", NamedPipes.luapipename, PipeDirection.Out))
                        {
                            namedPipeClientStream.Connect();
                            using (StreamWriter streamWriter = new StreamWriter(namedPipeClientStream, Encoding.Default, 999999))
                            {
                                streamWriter.Write(script);
                                streamWriter.Dispose();
                            }
                            namedPipeClientStream.Dispose();
                        }
                    }
                    catch (IOException oException)
                    {
                        MessageBox.Show("Pipe is incorrect! Contact to owner of this app!", "Exploit - Connection Failed", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    }
                    catch (Exception exception)
                    {
                        MessageBox.Show(exception.Message.ToString());
                    }
                })).Start();
            }
        }

        public static bool NamedPipeExist(string pipeName)
        {
            bool flag;
            try
            {
                if (!NamedPipes.WaitNamedPipe(string.Concat("\\\\.\\pipe\\", pipeName), 0))
                {
                    int lastWin32Error = Marshal.GetLastWin32Error();
                    if (lastWin32Error == 0)
                    {
                        flag = false;
                        return flag;
                    }
                    else if (lastWin32Error == 2)
                    {
                        flag = false;
                        return flag;
                    }
                }
                flag = true;
            }
            catch (Exception exception)
            {
                flag = false;
            }
            return flag;
        }

        [DllImport("kernel32.dll", CharSet = CharSet.Auto, ExactSpelling = false, SetLastError = true)]
        private static extern bool WaitNamedPipe(string name, int timeout);
    }
}

____________________________________________________
Functions List (for ur buttons and other)
____________________________________________________

InjectButton:

Functions.Inject();
InjectionStatus.Start(); //this is a addon and timer name)
____________________________________________________
ExecuteButton:

Classic:

NamedPipes.LuaPipe(EditorName.Text);

(if u have monaco paste a monaco code but change a last line of code on this my execute code)

Monaco:            
HtmlDocument doc = webBrowser1.Document;                
string ScriptString = "GetText";
object[] args = new string[0];
object obj = doc.InvokeScript(ScriptString, args);
string script = obj.ToString();
NamedPipes.LuaPipe(script);

____________________________________________________
Clear Editor:

TextBoxName.Text = "";

(if u have a classic text box)

webBrowser1.Document.InvokeScript("SetText", new object[]
            {
                ""
            });

(if u have web browser/monaco editor)
____________________________________________________
Open File:

if (Functions.openfiledialog.ShowDialog() == DialogResult.OK)
            {
                try
                {

                    string MainText = File.ReadAllText(Functions.openfiledialog.FileName);
                    webBrowser1.Document.InvokeScript("SetText", new object[]
                    {
                          MainText
                    });

                }
                catch (Exception ex)
                {
                    MessageBox.Show("Error: Could not read file from disk. Original error: " + ex.Message);
                }
            }
____________________________________________________
Save File: (fixed by me)

(this using web browser/monaco/ace Editor)

HtmlDocument document = this.webBrowser1.Document;
            string str = "GetText";
            object[] objArray = new string[0];
            object[] objArray1 = objArray;
            object[] objArray2 = objArray1;
            object obj = document.InvokeScript(str, objArray2);
            string str1 = obj.ToString();
            using (SaveFileDialog saveFileDialog = new SaveFileDialog())
            {
                saveFileDialog.Filter = "Lua Script (*.lua)|*.lua|Text File (*.txt)|*.txt|All Files (*.*)|*.*";
                saveFileDialog.Title = "Exploit - Save File";
                saveFileDialog.ShowDialog();
                try
                {
                    string fileName = saveFileDialog.FileName;
                    string str2 = str1;
                    string[] strArrays = new string[] { str2.ToString(), "" };
                    File.WriteAllLines(saveFileDialog.FileName, strArrays);
                    fileName = null;
                    str2 = null;
                    strArrays = null;
                }
                catch (Exception exception)
                {
                }
            }
____________________________________________________
Kill Roblox Process:

foreach (var process in Process.GetProcessesByName("RobloxPlayerBeta"))
            {
                process.Kill();
            }

____________________________________________________
Addons:
____________________________________________________

InjectionStatus: (add a new timer)


if (!NamedPipes.NamedPipeExist(NamedPipes.luapipename))
            {
                this.LabelName.Text = "Exploit v1.8.3.9 - Ready to Inject...";
            }
            else
            {
                this.LabelName.Text = "Exploit v1.8.3.9 - Injected!";
            }

____________________________________________________
ListBox_Click (loading a script to editor by click)


if (this.listBox1.SelectedIndex != -1)
            {
                this.webBrowser1.Document.InvokeScript("SetText", new object[1]
                {
          (object) System.IO.File.ReadAllText("scripts\\" + this.listBox1.SelectedItem.ToString())
                });
            }
            else
            {
                int num = (int)MessageBox.Show("Choose ur script before load!", "Exploit - Load Script");
            }

____________________________________________________
RefreshScripts in ListBox: (I recommend paste that code to "public ProjectName Code" where u have this InitializeComponent();)


listBox1.Items.Clear();//Clear Items in the LuaScriptList
Functions.PopulateListBox(listBox1, "./scripts", "*.txt");
Functions.PopulateListBox(listBox1, "./scripts", "*.lua");

____________________________________________________
FadeIn: (change ur form opacity on 0% and paste that code in new timer)


            if (Opacity == 1)
            {
                FadeIn.Stop();
            }
            Opacity += .1;

____________________________________________________
FadeOut:

            if (Opacity <= 0)
            {
                Application.Exit();
            }
            Opacity -= .1;

____________________________________________________
AutoAttach: (yes make a new timer and set a async)
(make a new bool named AutoAttach in public class form)
or paste this in public class
--------

        int valuep = 0;
        bool AutoAttach;

--------

if (CheckBoxName.Checked == true)
            {
                if (AutoAttach == false)
                {
                    Process[] rbProcess = Process.GetProcessesByName("RobloxPlayerBeta");
                    if (rbProcess.Length == 1)
                    {
                        if (!NamedPipes.NamedPipeExist(NamedPipes.luapipename))
                        {
                            AutoAttach = true;
                            await Task.Delay(5000);
                            Functions.Inject();
                        }
                    }
                }
                if (AutoAttach == true)
                {
                    Process[] rbProcess = Process.GetProcessesByName("RobloxPlayerBeta");
                    if (rbProcess.Length == 0)
                    {
                        if (!NamedPipes.NamedPipeExist(NamedPipes.luapipename))
                        {
                            AutoAttach = false;
                        }
                    }
                }
            }

____________________________________________________
TopMost:

if (CheckBoxName.Checked == true)
            {
                this.TopMost = true;
            }
            else
            {
                this.TopMost = false;
            }
____________________________________________________
AutoExecute: (working and not. u need to configure this good and new timer need)


            Functions.Inject();

            while (!NamedPipes.NamedPipeExist(NamedPipes.luapipename))
            {
                await Task.Delay(1);
            }
            if (!NamedPipes.NamedPipeExist(NamedPipes.luapipename))
            {
                await Task.Delay(3000);
                DirectoryInfo d = new DirectoryInfo(Directory.GetCurrentDirectory() + "\\autoexec");
                FileInfo[] TXTFiles = d.GetFiles("*.txt");
                foreach (FileInfo file in TXTFiles)
                {
                    NamedPipes.LuaPipe(File.ReadAllText($"./autoexec/{file.Name}"));
                }
                FileInfo[] LUAFiles = d.GetFiles("*.lua");
                foreach (FileInfo file in LUAFiles)
                {
                    NamedPipes.LuaPipe(File.ReadAllText($"./autoexec/{file.Name}"));
                }
            }

____________________________________________________
AceEditor: (so yeah now if u want add a web Browser Editor do it)
____________________________________________________
1. Copy and paste "ace" folder to ur Project Debug Folder
2. Add a WebBrowser to ur Project.
3. Paste that code in "Load_ProjectName or public ProjectName with auto refreshing scripts:

this.webBrowser1.Navigate(string.Format("file:///{0}ace/AceEditorInk.html", AppDomain.CurrentDomain.BaseDirectory));
____________________________________________________
3. U can change a themes in editor codes just changing a Theme Name)
My set theme codes: 
( u can paste that codes example in buttons)

this.webBrowser1.Navigate(string.Format("file:///{0}ace/AceEditorDawn.html", AppDomain.CurrentDomain.BaseDirectory));
--------
this.webBrowser1.Navigate(string.Format("file:///{0}ace/AceEditorKr.html", AppDomain.CurrentDomain.BaseDirectory));
--------
this.webBrowser1.Navigate(string.Format("file:///{0}ace/AceEditorCloudsM.html", AppDomain.CurrentDomain.BaseDirectory));
--------
____________________________________________________
Other:
____________________________________________________

Open a new form and close actualy:

Form1 main = new Form1();
main.Show();
this.Close();

__________________________________________________
idk what i can add more so yeah. thats all maybe

Close Application:

Application.Exit();

____________________________________________________
Minimize Application

this.WindowState = new FormWindowState.Minimized;

____________________________________________________
SettingsPanel:

Show:

SettingsPanel.Show();
____________________________________________________
Hide:

SettingsPanel.Hide();
____________________________________________________
O yeah and paste that used systems if u want (in Main Exploit Form Code)

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Timers;

```


LIST OF CODES BY 
DAREQPLAYSRBX#1001



